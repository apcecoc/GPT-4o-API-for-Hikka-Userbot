import json
import aiohttp
import re
from telethon.tl.types import Message
from .. import loader, utils

__version__ = (1, 0, 12)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2024
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://example.com/api_icon.png
# meta banner: https://example.com/api_banner.jpg
# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

@loader.tds
class GPT4oMod(loader.Module):
    """Interact with GPT-4o API"""

    strings = {
        "name": "GPT4oAPI",
        "processing": "ü§ñ <b>Processing your request...</b>",
        "error": "‚ùå <b>Error while processing your request.</b>",
        "response": "ü§ñ <b>GPT-4o Response:</b>\n\n{response}",
    }

    strings_ru = {
        "processing": "ü§ñ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>",
        "response": "ü§ñ <b>–û—Ç–≤–µ—Ç GPT-4o:</b>\n\n{response}",
        "_cls_doc": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API GPT-4–æ",
    }

    def _markdown_to_html(self, text: str) -> str:
        """
        Convert Markdown to HTML manually.
        """
        # –ó–∞–º–µ–Ω–∞ **–∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞**
        text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
        # –ó–∞–º–µ–Ω–∞ _–∫—É—Ä—Å–∏–≤–∞_
        text = re.sub(r"_(.+?)_", r"<i>\1</i>", text)
        # –ó–∞–º–µ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# Header)
        text = re.sub(r"^# (.+)", r"<h1>\1</h1>", text, flags=re.MULTILINE)
        text = re.sub(r"^## (.+)", r"<h2>\1</h2>", text, flags=re.MULTILINE)
        text = re.sub(r"^### (.+)", r"<h3>\1</h3>", text, flags=re.MULTILINE)
        # –ó–∞–º–µ–Ω–∞ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ ```language\ncode```
        text = re.sub(
            r"```(\w+)?\n([\s\S]*?)```",
            lambda m: f"<pre><code class='{m.group(1) or 'plaintext'}'>{utils.escape_html(m.group(2))}</code></pre>",
            text,
        )
        # –ó–∞–º–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ `code`
        text = re.sub(r"`(.+?)`", r"<code>\1</code>", text)
        return text

    @loader.command(ru_doc="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ GPT-4o API")
    async def gpt4o(self, message: Message):
        """Send a request to GPT-4o API"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("error"))
            return

        await utils.answer(message, self.strings("processing"))

        payload = {
            "messages": [
                {
                    "role": "user",
                    "content": args,
                }
            ]
        }

        api_url = "https://api.paxsenix.biz.id/ai/gpt4o"
        headers = {"Content-Type": "application/json"}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, headers=headers, json=payload) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        response_message = data.get("message", "No response received.")

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
                        html_response = self._markdown_to_html(response_message)

                        await utils.answer(
                            message,
                            self.strings("response").format(response=html_response),
                        )
                    else:
                        await utils.answer(message, self.strings("error"))
        except Exception as e:
            await utils.answer(message, self.strings("error"))
            raise e
